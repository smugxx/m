local Players = game:GetService("Players")
local BadgeService = game:GetService("BadgeService")
local InsertService = game:GetService("InsertService")
local Player = Players.LocalPlayer
local Event = InsertService.Events.spellHit
local Cam = workspace.CurrentCamera
local Processing = false
local Blacklist = {}
local Whitelist = {}
local CurrentChat = ""
local SpectateUser = 0

local Animations = {
	["http://www.roblox.com/asset/?id=507768375"] = "hold";
	["rbxassetid://3013604397"] = "block";
	["rbxassetid://970070729"] = "cast";
	["rbxassetid://970074590"] = "cast";
	["rbxassetid://970065642"] = "cast";
	["rbxassetid://3049395565"] = "diabolica";
	["rbxassetid://3060758697"] = "infernum";
}

local Data = BadgeService:FindFirstChild("data")
if not Data then
	Data = Instance.new("Folder", BadgeService);
	Data.Name = "data";
end

local SpellHit = Data:FindFirstChild("spellHit")
if not SpellHit then
	SpellHit = Instance.new("IntValue", Data);
	SpellHit.Name = "SpellHit";
	SpellHit.Value = 1;
end

function GetPlr(Arg)
	local PlrList = Players:GetPlayers()
	for Index, SelPlayer in pairs(PlrList) do
		local LoweredName = string.lower(SelPlayer.Name)
		if string.sub(LoweredName, 1, #Arg) == Arg then
			return SelPlayer;
		elseif Index == #PlrList then
			return nil;
		end
	end
end

function GetAnims(Target)
	local NameList = {}
	local Humanoid = Target.Character:WaitForChild("Humanoid")
	for _, Anim in pairs(Humanoid:GetPlayingAnimationTracks()) do
		local AnimName = Animations[Anim.Animation.AnimationId]
		if AnimName then
			table.insert(NameList, AnimName);
		end
	end
	return NameList;
end

function FireSpell(Character, Spell)
	pcall(function()
		if CurrentChat ~= Spell then
			Players:Chat(Spell);
		end
		local SpellID = tostring(Player.Name .. workspace.DistributedGameTime)
		local DistanceID = ((SpellHit.Value + 0.5428) * 2) ^ (math.pi * 0.5)
		local DataTable = {
			hitPart = Character;
			actor = Character;
			hitCf = Character.PrimaryPart.CFrame;
			spellName = Spell;
			id = SpellID;
			distance = DistanceID;
		}
		Event:FireServer(DataTable);
	end)
end

function WandAdded(Target, Wand)
	task.wait();
	if Wand:IsA("Tool") and not Wand:FindFirstChild("KnownTag") then
		local Tag = Instance.new("BoolValue", Wand)
		local Humanoid = Target.Character:WaitForChild("Humanoid")
		local Trail = Wand.Handle:FindFirstChild("tipTrail")
		Tag.Name = "KnownTag";
		Wand.ChildRemoved:Connect(function(Object)
			if Object.Name == "Mesh" and Tag then
				print(Target.Name .. " - flagged for BRICK WAND");
			end
		end)
		Humanoid.ChildAdded:Connect(function(Object)
			if Object.Name == "isClashing" or Object.Name == "obliviateTag" then
				if Trail then
					Trail.Enabled = false;
				end
			end
		end)
		if Trail then
			Trail:GetPropertyChangedSignal("Enabled"):Connect(function()
				if Trail.Enabled and Humanoid then
					local IsClashing = Humanoid:FindFirstChild("isClashing")
					local ObliviateTag = Humanoid:FindFirstChild("obliviateTag")
					if IsClashing then
						print(Target.Name .. " - flagged for CLASH GODMODE");
					end
					if ObliviateTag and not table.find (GetAnims(Target), "infernum") then
						print(Target.Name .. " - flagged for ANTI OBLIVIATE");
					end
				end
			end)
		end
	end
end

function PlrAdded(Target)
	Target.Chatted:Connect(function(Msg)
		if Player == Target then
			CurrentChat = Msg;
			local LoweredMsg = string.lower(Msg)
			local Split = string.split(LoweredMsg, " ")
			local NewTarget = GetPlr(Split[2])
			if NewTarget then
				if Split[1] == ">bl" then
					if not table.find(Blacklist, NewTarget.UserId) then
						table.insert(Blacklist, NewTarget.UserId);
						FireSpell(NewTarget.Character, "deletrius");
					end
				elseif Split[1] == ">unbl" then
					if table.find(Blacklist, NewTarget.UserId) then
						for Index, Value in pairs(Blacklist) do
							if Value == NewTarget.UserId then
								table.remove(Blacklist, Index);
							end
						end
					end
				elseif Split[1] == ">wl" then
					if not table.find(Whitelist, NewTarget.UserId) then
						table.insert(Whitelist, NewTarget.UserId);
					end
				elseif Split[1] == ">unwl" then
					if table.find(Whitelist, NewTarget.UserId) then
						for Index, Value in pairs(Whitelist) do
							if Value == NewTarget.UserId then
								table.remove(Whitelist, Index);
							end
						end
					end
				elseif Split[1] == ">spec" then
					SpectateUser = NewTarget.UserId;
					Cam.CameraSubject = NewTarget.Character:WaitForChild("Humanoid");
				elseif Split[1] == ">del" then
					FireSpell(NewTarget.Character, "deletrius");
				elseif Split[1] == ">to" then
					Player.Character.PrimaryPart.CFrame = NewTarget.Character.PrimaryPart.CFrame;
				elseif Split[1] == ">here" then
					local Amount = tonumber(Split[3])
					if Amount then
						for i = 1, Amount do
							local Character = workspace:FindFirstChild(NewTarget.Name)
							if Character then
								FireSpell(Character, "carpe retractum");
							else
								break;
							end
							task.wait(0.2);
						end
					end
				end
			end
		end
		if string.sub(LoweredMsg, 1, 3) ~= "/e " and string.sub(LoweredMsg, 1, 9) ~= "/c system" and not table.find(Whitelist, Target.UserId) then
			task.wait(0.5);
			local Objects = Player.PlayerGui.Chat.Frame.ChatChannelParentFrame.Frame_MessageLogDisplay.Scroller:GetChildren()
			for Index, Object in pairs(Objects) do
				if Object.Name == "Frame" then
					if string.find(Object.TextLabel.TextButton.Text, Target.DisplayName) and string.find(Object.TextLabel.Text, Msg) then
						break;
					elseif Index == #Objects then
						print(Target.Name .. " .. " .. Msg);
					end
				end
			end
		end
	end)
	Target.CharacterAdded:Connect(function(Character)
		task.wait(0.1);
		if table.find(Blacklist, Target.UserId) then
			FireSpell(Character, "deletrius");
		end
		if SpectateUser == Target.UserId or Player == Target then
			local NewTarget = Players:GetPlayerByUserId(SpectateUser)
			if NewTarget then
				Cam.CameraSubject = NewTarget.Character:WaitForChild("Humanoid");
			end
		end
		Character:WaitForChild("Head").ChildAdded:Connect(function(Object)
			local FlightTool = Target.Backpack:FindFirstChild("Flight") or Character:FindFirstChild("Flight")
			if Object.Name == "flightParticle" and not FlightTool then
				print(Target.Name .. " - flagged for FLIGHT BYPASS");
			end
		end)
		for _, Object in pairs(Character:GetChildren()) do
			WandAdded(Target, Object);
		end
		Character.ChildAdded:Connect(function(Object)
			WandAdded(Target, Object);
		end)
		repeat
			task.wait(1);
			local Anims = GetAnims(Target)
			local ElderWand = Target.Character:FindFirstChild("Elder Wand")
			local Wand = Target.Character:FindFirstChild("Wand")
			if not ElderWand then
				if table.find(Anims, "infernum") or table.find(Anims, "diabolica") then
					print(Target.Name .. " - flagged for ELDER BYPASS");
				end
			end
			if table.find(Anims, "hold") and not Wand and not ElderWand then
				for Index = 1, 5 do
					task.wait(1);
					local Anims = GetAnims(Target)
					local ElderWand = Target.Character:FindFirstChild("Elder Wand")
					local Wand = Target.Character:FindFirstChild("Wand")
					if table.find(Anims, "hold") and not Wand and not ElderWand then
						if Index == 5 then
							print(Target.Name .. " - flagged for WAND CLONING");
						end
					else
						break;
					end
				end
			end
		until not Character
	end)
	for _, Object in pairs(Target.Backpack:GetChildren()) do
		WandAdded(Target, Object);
	end
	Target.Backpack.ChildAdded:Connect(function(Object)
		WandAdded(Target, Object);
	end)
end

function WorkspaceAdded(Object)
	task.wait(0.1);
	local KnownTag = Object:FindFirstChild("KnownTag")
	if Object.Name == "clashBlock" and Processing then
		Object:Destroy();
	end
	if KnownTag then
		KnownTag:Destroy();
	end
end

function CharAdded(Character)
	local Humanoid = Character:WaitForChild("Humanoid")
	Humanoid.ChildAdded:Connect(function(Object)
		if Object.Name == "isClashing" then
			Processing = true;
			local Wand = Character:FindFirstChild("Wand") or Character:FindFirstChild("Elder Wand")
			local Tip = Wand.Handle.Tip
			local TipClone = Tip:Clone()
			TipClone.Parent = Wand.Handle;
			Tip:Destroy();
			for _, Anim in pairs(Humanoid:GetPlayingAnimationTracks()) do
				if Anim.Name == "Animation" then
					Anim:Stop();
					Anim:Destroy();
				end
			end
			Object.Name = "randomname";
			task.wait(0.5);
			Processing = false;
		end
	end)
end

workspace.ChildAdded:Connect(WorkspaceAdded);
Players.PlayerAdded:Connect(PlrAdded);
Player.CharacterAdded:Connect(CharAdded);
CharAdded(Player.Character);

for _, Target in pairs(Players:GetPlayers()) do
	PlrAdded(Target);
end
